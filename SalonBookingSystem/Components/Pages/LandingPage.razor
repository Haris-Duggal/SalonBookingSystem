@page "/"
@inject UserService UserService
@inject UserStateService UserStateService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="landing-container">
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">Glamour Studio</h1>
            <p class="hero-subtitle">Your Premier Destination for Beauty & Style</p>
            <p class="hero-description">Experience luxury salon services with our expert stylists and premium treatments.</p>

            <div class="auth-buttons">
                <button class="btn btn-primary btn-lg me-3" @onclick="ShowLoginModal">Login</button>
                <button class="btn btn-outline-light btn-lg" @onclick="ShowSignupModal">Sign Up</button>
            </div>
        </div>
    </div>
</div>

<!-- Login Modal -->
<div class="modal fade @(showLoginModal ? "show d-block" : "")" tabindex="-1" style="@(showLoginModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Login to Your Account</h5>
                <button type="button" class="btn-close" @onclick="HideLoginModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="loginModel.Email" class="form-control" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText @bind-Value="loginModel.Password" type="password" class="form-control" placeholder="Enter your password" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    @if (!string.IsNullOrEmpty(loginError))
                    {
                        <div class="alert alert-danger">@loginError</div>
                    }

                    <div class="d-grid">
                        <button type="submit" class="btn btn-primary" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Login
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<!-- Signup Modal -->
<div class="modal fade @(showSignupModal ? "show d-block" : "")" tabindex="-1" style="@(showSignupModal ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Your Account</h5>
                <button type="button" class="btn-close" @onclick="HideSignupModal"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="signupModel" OnValidSubmit="HandleSignup">
                    <DataAnnotationsValidator />

                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <InputText @bind-Value="signupModel.Name" class="form-control" placeholder="Enter your full name" />
                        <ValidationMessage For="@(() => signupModel.Name)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText @bind-Value="signupModel.Email" class="form-control" placeholder="Enter your email" />
                        <ValidationMessage For="@(() => signupModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <InputText @bind-Value="signupModel.Phone" class="form-control" placeholder="Enter your phone number" />
                        <ValidationMessage For="@(() => signupModel.Phone)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Gender</label>
                        <InputSelect @bind-Value="signupModel.Gender" class="form-select">
                            <option value="">Select Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => signupModel.Gender)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText @bind-Value="signupModel.Password" type="password" class="form-control" placeholder="Create a password" />
                        <ValidationMessage For="@(() => signupModel.Password)" />
                    </div>

                    @if (!string.IsNullOrEmpty(signupError))
                    {
                        <div class="alert alert-danger">@signupError</div>
                    }

                    <div class="d-grid">
                        <button type="submit" class="btn btn-success" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            Sign Up
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .landing-container {
        height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
        margin: 0;
    }

    .hero-section {
        text-align: center;
        color: white;
        max-width: 600px;
        padding: 2rem;
    }

    .hero-title {
        font-size: 4rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .hero-subtitle {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        font-weight: 300;
    }

    .hero-description {
        font-size: 1.1rem;
        margin-bottom: 2rem;
        opacity: 0.9;
    }

    .auth-buttons {
        margin-top: 2rem;
    }

    .btn-lg {
        padding: 12px 30px;
        font-size: 1.1rem;
        border-radius: 50px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background: linear-gradient(45deg, #ff6b6b, #ee5a24);
        border: none;
        box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
    }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
        }

    .btn-outline-light {
        border: 2px solid white;
        color: white;
        background: transparent;
    }

        .btn-outline-light:hover {
            background: white;
            color: #667eea;
            transform: translateY(-2px);
        }

    .modal-content {
        border-radius: 15px;
        border: none;
        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }

    .modal-header {
        border-bottom: 1px solid #eee;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .form-control, .form-select {
        border-radius: 10px;
        border: 1px solid #ddd;
        padding: 12px 15px;
        font-size: 1rem;
    }

        .form-control:focus, .form-select:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

    .btn {
        border-radius: 10px;
        padding: 12px 20px;
        font-weight: 500;
    }
</style>


@code {
    private bool showLoginModal = false;
    private bool showSignupModal = false;
    private bool isLoading = false;
    private string loginError = "";
    private string signupError = "";

    private LoginModel loginModel = new();
    private SignupModel signupModel = new();

    private void ShowLoginModal()
    {
        showLoginModal = true;
        loginError = "";
    }

    private void HideLoginModal()
    {
        showLoginModal = false;
        loginModel = new();
        loginError = "";
    }

    private void ShowSignupModal()
    {
        showSignupModal = true;
        signupError = "";
    }

    private void HideSignupModal()
    {
        showSignupModal = false;
        signupModel = new();
        signupError = "";
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        loginError = "";

        try
        {
            var user = await UserService.ValidateLoginAsync(loginModel.Email, loginModel.Password);

            if (user != null)
            {
                UserStateService.SetUser(user);
                Navigation.NavigateTo("/home");
            }
            else
            {
                loginError = "Invalid email or password.";
            }
        }
        catch (Exception ex)
        {
            loginError = "An error occurred during login. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSignup()
    {
        isLoading = true;
        signupError = "";

        try
        {
            var newUser = new User
                {
                    Name = signupModel.Name,
                    Email = signupModel.Email,
                    Phone = signupModel.Phone,
                    Gender = signupModel.Gender,
                    Password = signupModel.Password,
                    Role = "Customer"
                };

            await UserService.AddAsync(newUser);

            var loginUser = await UserService.ValidateLoginAsync(signupModel.Email, signupModel.Password);
            if (loginUser != null)
            {
                UserStateService.SetUser(loginUser);
                Navigation.NavigateTo("/home");
            }
        }
        catch (Exception ex)
        {
            signupError = "An error occurred during signup. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = "";
    }

    public class SignupModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Phone is required")]
        public string Phone { get; set; } = "";

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";
    }
}